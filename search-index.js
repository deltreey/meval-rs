var searchIndex = {};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding\nto the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,null],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["meval"] = {"doc":"This [Rust] crate provides a simple math expression parsing and evaluation. Its main goal is to\nbe convenient to use, while allowing for some flexibility. Currently works only with `f64`\ntypes. A typical use case is the configuration of numerical computations in\nRust, think initial data and boundary conditions, via config files or command line arguments.","items":[[3,"Expr","meval","Representation of a parsed expression.",null,null],[3,"Context","","A structure for storing variables/constants and functions to be used in an expression.",null,null],[4,"FuncEvalError","","Function evaluation error.",null,null],[13,"TooFewArguments","","",0,null],[13,"TooManyArguments","","",0,null],[13,"NumberArgs","","",0,null],[13,"UnknownFunction","","",0,null],[4,"Error","","An error produced during parsing or evaluation.",null,null],[13,"UnknownVariable","","",1,null],[13,"Function","","",1,null],[13,"ParseError","","An error returned by the parser.",1,null],[13,"RPNError","","The shunting-yard algorithm returned an error.",1,null],[5,"eval_str","","Evaluates a string with built-in constants and functions.",null,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[5,"eval_str_with_context","","Evaluates a string with the given context.",null,{"inputs":[{"name":"s"},{"name":"c"}],"output":{"name":"result"}}],[0,"tokenizer","","Tokenizer that converts a mathematical expression in a string form into a series of `Token`s.",null,null],[4,"ParseError","meval::tokenizer","An error reported by the parser.",null,null],[13,"UnexpectedToken","","A token that is not allowed at the given location (contains the location of the offending\ncharacter in the source string).",2,null],[13,"MissingRParen","","Missing right parentheses at the end of the source string (contains the number of missing\nparens).",2,null],[13,"MissingArgument","","Missing operator or function argument at the end of the expression.",2,null],[4,"Operation","","Mathematical operations.",null,null],[13,"Plus","","",3,null],[13,"Minus","","",3,null],[13,"Times","","",3,null],[13,"Div","","",3,null],[13,"Rem","","",3,null],[13,"Pow","","",3,null],[4,"Token","","Expression tokens.",null,null],[13,"Binary","","Binary operation.",4,null],[13,"Unary","","Unary operation.",4,null],[13,"LParen","","Left parenthesis.",4,null],[13,"RParen","","Right parenthesis.",4,null],[13,"Comma","","Comma: function argument separator",4,null],[13,"Number","","A number.",4,null],[13,"Var","","A variable.",4,null],[13,"Func","","A function with name and number of arguments.",4,null],[5,"tokenize","","Tokenize a given mathematical expression.",null,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[0,"shunting_yard","meval","Implementation of the shunting-yard algorithm for converting an infix expression to an\nexpression in reverse Polish notation (RPN).",null,null],[4,"RPNError","meval::shunting_yard","An error produced by the shunting-yard algorightm.",null,null],[13,"MismatchedLParen","","An extra left parenthesis was found.",5,null],[13,"MismatchedRParen","","An extra right parenthesis was found.",5,null],[13,"UnexpectedComma","","Comma that is not separating function arguments.",5,null],[13,"NotEnoughOperands","","Too few operands for some operator.",5,null],[13,"TooManyOperands","","Too many operands reported.",5,null],[5,"to_rpn","","Converts a tokenized infix expression to reverse Polish notation.",null,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"deserialize","meval","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eval","","Evaluates the expression with variables given by the argument.",6,null],[11,"eval_with_context","","Evaluates the expression with variables given by the argument.",6,null],[11,"bind","","Creates a function of one variable based on this expression, with default constants and\nfunctions.",6,null],[11,"bind_with_context","","Creates a function of one variable based on this expression.",6,null],[11,"bind2","","Creates a function of two variables based on this expression, with default constants and\nfunctions.",6,null],[11,"bind2_with_context","","Creates a function of two variables based on this expression.",6,null],[11,"bind3","","Creates a function of three variables based on this expression, with default constants and\nfunctions.",6,null],[11,"bind3_with_context","","Creates a function of three variables based on this expression.",6,null],[11,"from_str","","Constructs an expression by parsing a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",6,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"clone","","",7,null],[11,"new","","Creates a context with built-in constants and functions.",7,{"inputs":[],"output":{"name":"context"}}],[11,"empty","","Creates an empty contexts.",7,{"inputs":[],"output":{"name":"context"}}],[11,"var","","Adds a new variable/constant.",7,null],[11,"func","","Adds a new function of one argument.",7,null],[11,"func2","","Adds a new function of two arguments.",7,null],[11,"func3","","Adds a new function of three arguments.",7,null],[11,"funcn","","Adds a new function of a variable number of arguments.",7,null],[11,"get_var","","",7,null],[11,"eval_func","","",7,null],[0,"de","","Deserialization utilities.",null,null],[5,"as_f64","meval::de","Deserialize into [`Expr`](../struct.Expr.html) and then evaluate using `Expr::eval`.",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"ContextProvider","meval","A trait of a source of variables (and constants) and functions for substitution into an\nevaluated expression.",null,null],[11,"get_var","","",8,null],[11,"eval_func","","",8,null],[8,"ArgGuard","","Trait for types that can specify the number of required arguments for a function with a\nvariable number of arguments.",null,null],[10,"to_arg_guard","","",9,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"rpnerror"}],"output":{"name":"error"}}],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"get_var","","",8,null],[11,"eval_func","","",8,null]],"paths":[[4,"FuncEvalError"],[4,"Error"],[4,"ParseError"],[4,"Operation"],[4,"Token"],[4,"RPNError"],[3,"Expr"],[3,"Context"],[8,"ContextProvider"],[8,"ArgGuard"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -&gt; T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -&gt; S, and a consumer C2 S -&gt; T, and makes a consumer R -&gt; T by applying C2 on C1&#39;s result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer&#39;s current computation state",null,null],[13,"Done","","A value of type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"description","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"is_known","","",2,null],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"is_done","","",3,null],[11,"is_err","","",3,null],[11,"is_incomplete","","",3,null],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",3,null],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",3,null],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",3,null],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_err","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"map","","",5,null],[11,"flat_map","","",5,null],[11,"apply","","",8,null],[11,"new","","",9,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"apply","","",9,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,null],[11,"refill","","",10,null],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,null],[11,"apply","","",10,null],[11,"new","","",11,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,null],[11,"state","","",11,null],[11,"new","","",12,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,null],[11,"state","","",12,null],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,null],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,null],[8,"InputLength","","",null,null],[10,"input_len","","",14,null],[8,"AsChar","","",null,null],[10,"as_char","","",15,null],[10,"is_alpha","","",15,null],[10,"is_alphanum","","",15,null],[10,"is_0_to_9","","",15,null],[10,"is_hex_digit","","",15,null],[10,"is_oct_digit","","",15,null],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,null],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,null],[8,"GetOutput","","",null,null],[10,"output","","",19,null],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",20,null],[10,"state","","returns the current state",20,null],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer&#39;s state",21,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error","","Prevents backtracking if the child parser fails",null,null],[14,"add_error","","Add an error if the child parser fails",null,null],[14,"fix_error","","translate parser result from IResult&lt;I,O,u32&gt; to IResult&lt;I,O,E&gt; with a custom type",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map","","`flat_map!(R -&gt; IResult&lt;R,S&gt;, S -&gt; IResult&lt;S,T&gt;) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"map","","`map!(I -&gt; IResult&lt;I,O&gt;, O -&gt; P) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Result&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Option&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value","","`value!(T, R -&gt; IResult&lt;R, S&gt; ) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"expr_res","","`expr_res!(Result&lt;E,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Result&lt;T,E&gt; and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option&lt;O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Option&lt;T&gt; and returns a IResult::Done(I,T) if Some",null,null],[14,"chain","","`chain!(I-&gt;IResult&lt;I,A&gt; ~ I-&gt;IResult&lt;I,B&gt; ~ ... I-&gt;IResult&lt;I,X&gt; , || { return O } ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchains parsers and assemble the results through a closure",null,null],[14,"tuple","","`tuple!(I-&gt;IResult&lt;I,A&gt;, I-&gt;IResult&lt;I,B&gt;, ... I-&gt;IResult&lt;I,X&gt;) =&gt; I -&gt; IResult&lt;I, (A, B, ..., X)&gt;`\nchains parsers and assemble the sub results in a tuple.",null,null],[14,"alt","","`alt!(I -&gt; IResult&lt;I,O&gt; | I -&gt; IResult&lt;I,O&gt; | ... | I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete","","This is a combination of the `alt!` and `complete!` combinators. Rather\nthan returning `Incomplete` on partial input, `alt_complete!` will try the\nnext alternative in the chain. You should use this only if you know you\nwill not receive partial input for the rules you&#39;re trying to match (this\nis almost always the case for parsing programming languages).",null,null],[14,"switch","","`switch!(I -&gt; IResult&lt;I,P&gt;, P =&gt; I -&gt; IResult&lt;I,O&gt; | ... | P =&gt; I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt","","`opt!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Result&lt;nom::Err,O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond","","`cond!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nConditional combinator with error",null,null],[14,"peek","","`peek!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result without consuming the input",null,null],[14,"not","","`not!(I -&gt; IResult&lt;I,0&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result only if the embedded parser returns Error or Incomplete\ndoes not consume the input",null,null],[14,"tap","","`tap!(name: I -&gt; IResult&lt;I,O&gt; =&gt; { block }) =&gt; I -&gt; IResult&lt;I, O&gt;`\nallows access to the parser&#39;s result without affecting it",null,null],[14,"pair","","`pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I, T&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\npreceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,T&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nterminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,U&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list","","`separated_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_nonempty_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"many0","","`many0!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1","","`many1!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, [O; nb]&gt;`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value","","`length_value!(I -&gt; IResult&lt;I, nb&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"fold_many0","","`fold_many0!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs\n`apply!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"recognize","","`recognize!(&amp;[T] -&gt; IResult&lt;&amp;[T], O&gt; ) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag","","`tag!(&amp;[T]: nom::AsBytes) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ndeclares a byte array as a suite to recognize",null,null],[14,"is_not","","`is_not!(&amp;[T:AsBytes]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&amp;[T]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], Vec&lt;T&gt;&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(&amp;[T] -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till","","`take_till!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;str&gt;`\nsame as take! but returning a &amp;str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`",null,null],[14,"length_bytes","","`length_bytes!(&amp;[T] -&gt; IResult&lt;&amp;[T], nb&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits","","`bits!( parser ) =&gt; ( &amp;[u8], (&amp;[u8], usize) -&gt; IResult&lt;(&amp;[u8], usize), T&gt; ) -&gt; IResult&lt;&amp;[u8], T&gt;`\ntransforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"take_bits","","`take_bits!(type, nb) =&gt; ( (&amp;[T], usize), U, usize) -&gt; IResult&lt;(&amp;[T], usize), U&gt;`\ngenerates a parser consuming the specified number of bits.",null,null],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) =&gt; &amp;[u8] -&gt; IResult&lt;&amp;[u8], char&gt;",null,null],[14,"consumer_from_parser","","",null,null],[14,"tag_s","","`tag_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ndeclares a string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(&amp;str -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["serde"] = {"doc":"# Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&amp;[u8]` and `Vec&lt;u8&gt;`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec&lt;u8&gt;` in order to serialize and deserialize in an efficient\nway.",null,null],[3,"Bytes","","Wraps a `&amp;[u8]` in order to serialize in an efficient way. Does not support\ndeserialization.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"new","","Wrap an existing `&amp;[u8]`.",1,null],[11,"fmt","","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,null],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor`\ntrait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\nwas not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\nwas not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not\nexpected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&amp;str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&amp;[u8]` or `Vec&lt;u8&gt;` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option&lt;T&gt;` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was\nnot expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"deserialize_bool","","",5,null],[11,"deserialize_u8","","",5,null],[11,"deserialize_u16","","",5,null],[11,"deserialize_u32","","",5,null],[11,"deserialize_u64","","",5,null],[11,"deserialize_i8","","",5,null],[11,"deserialize_i16","","",5,null],[11,"deserialize_i32","","",5,null],[11,"deserialize_i64","","",5,null],[11,"deserialize_f32","","",5,null],[11,"deserialize_f64","","",5,null],[11,"deserialize_char","","",5,null],[11,"deserialize_str","","",5,null],[11,"deserialize_string","","",5,null],[11,"deserialize_unit","","",5,null],[11,"deserialize_seq","","",5,null],[11,"deserialize_seq_fixed_size","","",5,null],[11,"deserialize_bytes","","",5,null],[11,"deserialize_map","","",5,null],[11,"deserialize_unit_struct","","",5,null],[11,"deserialize_newtype_struct","","",5,null],[11,"deserialize_tuple_struct","","",5,null],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,null],[11,"deserialize_tuple","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,null],[11,"deserialize_byte_buf","","",5,null],[11,"deserialize","","",5,null],[11,"deserialize_option","","",5,null],[11,"deserialize_bool","","",6,null],[11,"deserialize_u8","","",6,null],[11,"deserialize_u16","","",6,null],[11,"deserialize_u32","","",6,null],[11,"deserialize_u64","","",6,null],[11,"deserialize_i8","","",6,null],[11,"deserialize_i16","","",6,null],[11,"deserialize_i32","","",6,null],[11,"deserialize_i64","","",6,null],[11,"deserialize_f32","","",6,null],[11,"deserialize_f64","","",6,null],[11,"deserialize_char","","",6,null],[11,"deserialize_str","","",6,null],[11,"deserialize_string","","",6,null],[11,"deserialize_unit","","",6,null],[11,"deserialize_option","","",6,null],[11,"deserialize_seq","","",6,null],[11,"deserialize_seq_fixed_size","","",6,null],[11,"deserialize_bytes","","",6,null],[11,"deserialize_map","","",6,null],[11,"deserialize_unit_struct","","",6,null],[11,"deserialize_newtype_struct","","",6,null],[11,"deserialize_tuple_struct","","",6,null],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,null],[11,"deserialize_tuple","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,null],[11,"deserialize_byte_buf","","",6,null],[11,"deserialize","","",6,null],[11,"deserialize_bool","","",7,null],[11,"deserialize_u8","","",7,null],[11,"deserialize_u16","","",7,null],[11,"deserialize_u32","","",7,null],[11,"deserialize_u64","","",7,null],[11,"deserialize_i8","","",7,null],[11,"deserialize_i16","","",7,null],[11,"deserialize_i32","","",7,null],[11,"deserialize_i64","","",7,null],[11,"deserialize_f32","","",7,null],[11,"deserialize_f64","","",7,null],[11,"deserialize_char","","",7,null],[11,"deserialize_str","","",7,null],[11,"deserialize_string","","",7,null],[11,"deserialize_unit","","",7,null],[11,"deserialize_option","","",7,null],[11,"deserialize_seq","","",7,null],[11,"deserialize_seq_fixed_size","","",7,null],[11,"deserialize_bytes","","",7,null],[11,"deserialize_map","","",7,null],[11,"deserialize_unit_struct","","",7,null],[11,"deserialize_newtype_struct","","",7,null],[11,"deserialize_tuple_struct","","",7,null],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,null],[11,"deserialize_tuple","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,null],[11,"deserialize_byte_buf","","",7,null],[11,"deserialize","","",7,null],[11,"deserialize_bool","","",8,null],[11,"deserialize_u8","","",8,null],[11,"deserialize_u16","","",8,null],[11,"deserialize_u32","","",8,null],[11,"deserialize_u64","","",8,null],[11,"deserialize_i8","","",8,null],[11,"deserialize_i16","","",8,null],[11,"deserialize_i32","","",8,null],[11,"deserialize_i64","","",8,null],[11,"deserialize_f32","","",8,null],[11,"deserialize_f64","","",8,null],[11,"deserialize_char","","",8,null],[11,"deserialize_str","","",8,null],[11,"deserialize_string","","",8,null],[11,"deserialize_unit","","",8,null],[11,"deserialize_option","","",8,null],[11,"deserialize_seq","","",8,null],[11,"deserialize_seq_fixed_size","","",8,null],[11,"deserialize_bytes","","",8,null],[11,"deserialize_map","","",8,null],[11,"deserialize_unit_struct","","",8,null],[11,"deserialize_newtype_struct","","",8,null],[11,"deserialize_tuple_struct","","",8,null],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,null],[11,"deserialize_tuple","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,null],[11,"deserialize_byte_buf","","",8,null],[11,"deserialize","","",8,null],[11,"deserialize_bool","","",9,null],[11,"deserialize_u8","","",9,null],[11,"deserialize_u16","","",9,null],[11,"deserialize_u32","","",9,null],[11,"deserialize_u64","","",9,null],[11,"deserialize_i8","","",9,null],[11,"deserialize_i16","","",9,null],[11,"deserialize_i32","","",9,null],[11,"deserialize_i64","","",9,null],[11,"deserialize_f32","","",9,null],[11,"deserialize_f64","","",9,null],[11,"deserialize_char","","",9,null],[11,"deserialize_str","","",9,null],[11,"deserialize_string","","",9,null],[11,"deserialize_unit","","",9,null],[11,"deserialize_option","","",9,null],[11,"deserialize_seq","","",9,null],[11,"deserialize_seq_fixed_size","","",9,null],[11,"deserialize_bytes","","",9,null],[11,"deserialize_map","","",9,null],[11,"deserialize_unit_struct","","",9,null],[11,"deserialize_newtype_struct","","",9,null],[11,"deserialize_tuple_struct","","",9,null],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,null],[11,"deserialize_tuple","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,null],[11,"deserialize_byte_buf","","",9,null],[11,"deserialize","","",9,null],[11,"deserialize_bool","","",10,null],[11,"deserialize_u8","","",10,null],[11,"deserialize_u16","","",10,null],[11,"deserialize_u32","","",10,null],[11,"deserialize_u64","","",10,null],[11,"deserialize_i8","","",10,null],[11,"deserialize_i16","","",10,null],[11,"deserialize_i32","","",10,null],[11,"deserialize_i64","","",10,null],[11,"deserialize_f32","","",10,null],[11,"deserialize_f64","","",10,null],[11,"deserialize_char","","",10,null],[11,"deserialize_str","","",10,null],[11,"deserialize_string","","",10,null],[11,"deserialize_unit","","",10,null],[11,"deserialize_option","","",10,null],[11,"deserialize_seq","","",10,null],[11,"deserialize_seq_fixed_size","","",10,null],[11,"deserialize_bytes","","",10,null],[11,"deserialize_map","","",10,null],[11,"deserialize_unit_struct","","",10,null],[11,"deserialize_newtype_struct","","",10,null],[11,"deserialize_tuple_struct","","",10,null],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,null],[11,"deserialize_tuple","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,null],[11,"deserialize_byte_buf","","",10,null],[11,"deserialize","","",10,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,null],[11,"deserialize_byte_buf","","",11,null],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",12,null],[11,"deserialize_u8","","",12,null],[11,"deserialize_u16","","",12,null],[11,"deserialize_u32","","",12,null],[11,"deserialize_u64","","",12,null],[11,"deserialize_i8","","",12,null],[11,"deserialize_i16","","",12,null],[11,"deserialize_i32","","",12,null],[11,"deserialize_i64","","",12,null],[11,"deserialize_f32","","",12,null],[11,"deserialize_f64","","",12,null],[11,"deserialize_char","","",12,null],[11,"deserialize_str","","",12,null],[11,"deserialize_string","","",12,null],[11,"deserialize_unit","","",12,null],[11,"deserialize_option","","",12,null],[11,"deserialize_seq","","",12,null],[11,"deserialize_seq_fixed_size","","",12,null],[11,"deserialize_bytes","","",12,null],[11,"deserialize_map","","",12,null],[11,"deserialize_unit_struct","","",12,null],[11,"deserialize_newtype_struct","","",12,null],[11,"deserialize_tuple_struct","","",12,null],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,null],[11,"deserialize_tuple","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,null],[11,"deserialize_byte_buf","","",12,null],[11,"deserialize","","",12,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"deserialize_byte_buf","","",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_seq_fixed_size","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,null],[11,"deserialize_byte_buf","","",14,null],[11,"deserialize","","",14,null],[11,"deserialize_bool","","",15,null],[11,"deserialize_u8","","",15,null],[11,"deserialize_u16","","",15,null],[11,"deserialize_u32","","",15,null],[11,"deserialize_u64","","",15,null],[11,"deserialize_i8","","",15,null],[11,"deserialize_i16","","",15,null],[11,"deserialize_i32","","",15,null],[11,"deserialize_i64","","",15,null],[11,"deserialize_f32","","",15,null],[11,"deserialize_f64","","",15,null],[11,"deserialize_char","","",15,null],[11,"deserialize_str","","",15,null],[11,"deserialize_string","","",15,null],[11,"deserialize_unit","","",15,null],[11,"deserialize_option","","",15,null],[11,"deserialize_seq","","",15,null],[11,"deserialize_seq_fixed_size","","",15,null],[11,"deserialize_bytes","","",15,null],[11,"deserialize_map","","",15,null],[11,"deserialize_unit_struct","","",15,null],[11,"deserialize_newtype_struct","","",15,null],[11,"deserialize_tuple_struct","","",15,null],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,null],[11,"deserialize_tuple","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,null],[11,"deserialize_byte_buf","","",15,null],[11,"deserialize","","",15,null],[11,"deserialize_bool","","",16,null],[11,"deserialize_u8","","",16,null],[11,"deserialize_u16","","",16,null],[11,"deserialize_u32","","",16,null],[11,"deserialize_u64","","",16,null],[11,"deserialize_i8","","",16,null],[11,"deserialize_i16","","",16,null],[11,"deserialize_i32","","",16,null],[11,"deserialize_i64","","",16,null],[11,"deserialize_f32","","",16,null],[11,"deserialize_f64","","",16,null],[11,"deserialize_char","","",16,null],[11,"deserialize_str","","",16,null],[11,"deserialize_string","","",16,null],[11,"deserialize_unit","","",16,null],[11,"deserialize_option","","",16,null],[11,"deserialize_seq","","",16,null],[11,"deserialize_seq_fixed_size","","",16,null],[11,"deserialize_bytes","","",16,null],[11,"deserialize_map","","",16,null],[11,"deserialize_unit_struct","","",16,null],[11,"deserialize_newtype_struct","","",16,null],[11,"deserialize_tuple_struct","","",16,null],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,null],[11,"deserialize_tuple","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,null],[11,"deserialize_byte_buf","","",16,null],[11,"deserialize","","",16,null],[11,"deserialize_bool","","",17,null],[11,"deserialize_u8","","",17,null],[11,"deserialize_u16","","",17,null],[11,"deserialize_u32","","",17,null],[11,"deserialize_u64","","",17,null],[11,"deserialize_i8","","",17,null],[11,"deserialize_i16","","",17,null],[11,"deserialize_i32","","",17,null],[11,"deserialize_i64","","",17,null],[11,"deserialize_f32","","",17,null],[11,"deserialize_f64","","",17,null],[11,"deserialize_char","","",17,null],[11,"deserialize_str","","",17,null],[11,"deserialize_string","","",17,null],[11,"deserialize_unit","","",17,null],[11,"deserialize_option","","",17,null],[11,"deserialize_seq","","",17,null],[11,"deserialize_seq_fixed_size","","",17,null],[11,"deserialize_bytes","","",17,null],[11,"deserialize_map","","",17,null],[11,"deserialize_unit_struct","","",17,null],[11,"deserialize_newtype_struct","","",17,null],[11,"deserialize_tuple_struct","","",17,null],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,null],[11,"deserialize_tuple","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,null],[11,"deserialize_byte_buf","","",17,null],[11,"deserialize","","",17,null],[11,"deserialize_bool","","",18,null],[11,"deserialize_u8","","",18,null],[11,"deserialize_u16","","",18,null],[11,"deserialize_u32","","",18,null],[11,"deserialize_u64","","",18,null],[11,"deserialize_i8","","",18,null],[11,"deserialize_i16","","",18,null],[11,"deserialize_i32","","",18,null],[11,"deserialize_i64","","",18,null],[11,"deserialize_f32","","",18,null],[11,"deserialize_f64","","",18,null],[11,"deserialize_char","","",18,null],[11,"deserialize_str","","",18,null],[11,"deserialize_string","","",18,null],[11,"deserialize_unit","","",18,null],[11,"deserialize_option","","",18,null],[11,"deserialize_seq","","",18,null],[11,"deserialize_seq_fixed_size","","",18,null],[11,"deserialize_bytes","","",18,null],[11,"deserialize_map","","",18,null],[11,"deserialize_unit_struct","","",18,null],[11,"deserialize_newtype_struct","","",18,null],[11,"deserialize_tuple_struct","","",18,null],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,null],[11,"deserialize_tuple","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,null],[11,"deserialize_byte_buf","","",18,null],[11,"deserialize","","",18,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_seq_fixed_size","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize","","",19,null],[11,"deserialize","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,null],[11,"deserialize_u8","","",20,null],[11,"deserialize_u16","","",20,null],[11,"deserialize_u32","","",20,null],[11,"deserialize_u64","","",20,null],[11,"deserialize_i8","","",20,null],[11,"deserialize_i16","","",20,null],[11,"deserialize_i32","","",20,null],[11,"deserialize_i64","","",20,null],[11,"deserialize_f32","","",20,null],[11,"deserialize_f64","","",20,null],[11,"deserialize_char","","",20,null],[11,"deserialize_str","","",20,null],[11,"deserialize_string","","",20,null],[11,"deserialize_unit","","",20,null],[11,"deserialize_option","","",20,null],[11,"deserialize_seq","","",20,null],[11,"deserialize_seq_fixed_size","","",20,null],[11,"deserialize_bytes","","",20,null],[11,"deserialize_map","","",20,null],[11,"deserialize_unit_struct","","",20,null],[11,"deserialize_newtype_struct","","",20,null],[11,"deserialize_tuple_struct","","",20,null],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,null],[11,"deserialize_tuple","","",20,null],[11,"deserialize_ignored_any","","",20,null],[11,"deserialize_byte_buf","","",20,null],[11,"visit_variant_seed","","",20,null],[11,"deserialize","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,null],[11,"deserialize_u8","","",21,null],[11,"deserialize_u16","","",21,null],[11,"deserialize_u32","","",21,null],[11,"deserialize_u64","","",21,null],[11,"deserialize_i8","","",21,null],[11,"deserialize_i16","","",21,null],[11,"deserialize_i32","","",21,null],[11,"deserialize_i64","","",21,null],[11,"deserialize_f32","","",21,null],[11,"deserialize_f64","","",21,null],[11,"deserialize_char","","",21,null],[11,"deserialize_str","","",21,null],[11,"deserialize_string","","",21,null],[11,"deserialize_unit","","",21,null],[11,"deserialize_option","","",21,null],[11,"deserialize_seq","","",21,null],[11,"deserialize_seq_fixed_size","","",21,null],[11,"deserialize_bytes","","",21,null],[11,"deserialize_map","","",21,null],[11,"deserialize_unit_struct","","",21,null],[11,"deserialize_newtype_struct","","",21,null],[11,"deserialize_tuple_struct","","",21,null],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,null],[11,"deserialize_tuple","","",21,null],[11,"deserialize_ignored_any","","",21,null],[11,"deserialize_byte_buf","","",21,null],[11,"visit_variant_seed","","",21,null],[11,"deserialize","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,null],[11,"deserialize_u8","","",22,null],[11,"deserialize_u16","","",22,null],[11,"deserialize_u32","","",22,null],[11,"deserialize_u64","","",22,null],[11,"deserialize_i8","","",22,null],[11,"deserialize_i16","","",22,null],[11,"deserialize_i32","","",22,null],[11,"deserialize_i64","","",22,null],[11,"deserialize_f32","","",22,null],[11,"deserialize_f64","","",22,null],[11,"deserialize_char","","",22,null],[11,"deserialize_str","","",22,null],[11,"deserialize_string","","",22,null],[11,"deserialize_unit","","",22,null],[11,"deserialize_option","","",22,null],[11,"deserialize_seq","","",22,null],[11,"deserialize_seq_fixed_size","","",22,null],[11,"deserialize_bytes","","",22,null],[11,"deserialize_map","","",22,null],[11,"deserialize_unit_struct","","",22,null],[11,"deserialize_newtype_struct","","",22,null],[11,"deserialize_tuple_struct","","",22,null],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,null],[11,"deserialize_tuple","","",22,null],[11,"deserialize_ignored_any","","",22,null],[11,"deserialize_byte_buf","","",22,null],[11,"visit_variant_seed","","",22,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to\n`Visitor::visit_seq`.",23,null],[11,"deserialize","","",23,null],[11,"deserialize_bool","","",23,null],[11,"deserialize_u8","","",23,null],[11,"deserialize_u16","","",23,null],[11,"deserialize_u32","","",23,null],[11,"deserialize_u64","","",23,null],[11,"deserialize_i8","","",23,null],[11,"deserialize_i16","","",23,null],[11,"deserialize_i32","","",23,null],[11,"deserialize_i64","","",23,null],[11,"deserialize_f32","","",23,null],[11,"deserialize_f64","","",23,null],[11,"deserialize_char","","",23,null],[11,"deserialize_str","","",23,null],[11,"deserialize_string","","",23,null],[11,"deserialize_unit","","",23,null],[11,"deserialize_option","","",23,null],[11,"deserialize_seq","","",23,null],[11,"deserialize_seq_fixed_size","","",23,null],[11,"deserialize_bytes","","",23,null],[11,"deserialize_map","","",23,null],[11,"deserialize_unit_struct","","",23,null],[11,"deserialize_newtype_struct","","",23,null],[11,"deserialize_tuple_struct","","",23,null],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,null],[11,"deserialize_tuple","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,null],[11,"deserialize_byte_buf","","",23,null],[11,"visit_seed","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,null],[11,"deserialize_bool","","",24,null],[11,"deserialize_u8","","",24,null],[11,"deserialize_u16","","",24,null],[11,"deserialize_u32","","",24,null],[11,"deserialize_u64","","",24,null],[11,"deserialize_i8","","",24,null],[11,"deserialize_i16","","",24,null],[11,"deserialize_i32","","",24,null],[11,"deserialize_i64","","",24,null],[11,"deserialize_f32","","",24,null],[11,"deserialize_f64","","",24,null],[11,"deserialize_char","","",24,null],[11,"deserialize_str","","",24,null],[11,"deserialize_string","","",24,null],[11,"deserialize_unit","","",24,null],[11,"deserialize_option","","",24,null],[11,"deserialize_seq","","",24,null],[11,"deserialize_seq_fixed_size","","",24,null],[11,"deserialize_bytes","","",24,null],[11,"deserialize_map","","",24,null],[11,"deserialize_unit_struct","","",24,null],[11,"deserialize_newtype_struct","","",24,null],[11,"deserialize_tuple_struct","","",24,null],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,null],[11,"deserialize_tuple","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,null],[11,"deserialize_byte_buf","","",24,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to\n`Visitor::visit_map`.",25,null],[11,"deserialize","","",25,null],[11,"deserialize_seq","","",25,null],[11,"deserialize_seq_fixed_size","","",25,null],[11,"deserialize_bool","","",25,null],[11,"deserialize_u8","","",25,null],[11,"deserialize_u16","","",25,null],[11,"deserialize_u32","","",25,null],[11,"deserialize_u64","","",25,null],[11,"deserialize_i8","","",25,null],[11,"deserialize_i16","","",25,null],[11,"deserialize_i32","","",25,null],[11,"deserialize_i64","","",25,null],[11,"deserialize_f32","","",25,null],[11,"deserialize_f64","","",25,null],[11,"deserialize_char","","",25,null],[11,"deserialize_str","","",25,null],[11,"deserialize_string","","",25,null],[11,"deserialize_unit","","",25,null],[11,"deserialize_option","","",25,null],[11,"deserialize_bytes","","",25,null],[11,"deserialize_map","","",25,null],[11,"deserialize_unit_struct","","",25,null],[11,"deserialize_newtype_struct","","",25,null],[11,"deserialize_tuple_struct","","",25,null],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,null],[11,"deserialize_tuple","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,null],[11,"deserialize_byte_buf","","",25,null],[11,"visit_key_seed","","",25,null],[11,"visit_value_seed","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,null],[11,"deserialize_bool","","",26,null],[11,"deserialize_u8","","",26,null],[11,"deserialize_u16","","",26,null],[11,"deserialize_u32","","",26,null],[11,"deserialize_u64","","",26,null],[11,"deserialize_i8","","",26,null],[11,"deserialize_i16","","",26,null],[11,"deserialize_i32","","",26,null],[11,"deserialize_i64","","",26,null],[11,"deserialize_f32","","",26,null],[11,"deserialize_f64","","",26,null],[11,"deserialize_char","","",26,null],[11,"deserialize_str","","",26,null],[11,"deserialize_string","","",26,null],[11,"deserialize_unit","","",26,null],[11,"deserialize_option","","",26,null],[11,"deserialize_seq","","",26,null],[11,"deserialize_seq_fixed_size","","",26,null],[11,"deserialize_bytes","","",26,null],[11,"deserialize_map","","",26,null],[11,"deserialize_unit_struct","","",26,null],[11,"deserialize_newtype_struct","","",26,null],[11,"deserialize_tuple_struct","","",26,null],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,null],[11,"deserialize_tuple","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,null],[11,"deserialize_byte_buf","","",26,null],[11,"into_deserializer","serde::bytes","",1,null],[11,"deserialize","serde::de::value","",27,null],[11,"deserialize_bool","","",27,null],[11,"deserialize_u8","","",27,null],[11,"deserialize_u16","","",27,null],[11,"deserialize_u32","","",27,null],[11,"deserialize_u64","","",27,null],[11,"deserialize_i8","","",27,null],[11,"deserialize_i16","","",27,null],[11,"deserialize_i32","","",27,null],[11,"deserialize_i64","","",27,null],[11,"deserialize_f32","","",27,null],[11,"deserialize_f64","","",27,null],[11,"deserialize_char","","",27,null],[11,"deserialize_str","","",27,null],[11,"deserialize_string","","",27,null],[11,"deserialize_unit","","",27,null],[11,"deserialize_option","","",27,null],[11,"deserialize_seq","","",27,null],[11,"deserialize_seq_fixed_size","","",27,null],[11,"deserialize_bytes","","",27,null],[11,"deserialize_map","","",27,null],[11,"deserialize_unit_struct","","",27,null],[11,"deserialize_newtype_struct","","",27,null],[11,"deserialize_tuple_struct","","",27,null],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,null],[11,"deserialize_tuple","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,null],[11,"deserialize_byte_buf","","",27,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,null],[11,"deserialize_bool","","",28,null],[11,"deserialize_u8","","",28,null],[11,"deserialize_u16","","",28,null],[11,"deserialize_u32","","",28,null],[11,"deserialize_u64","","",28,null],[11,"deserialize_i8","","",28,null],[11,"deserialize_i16","","",28,null],[11,"deserialize_i32","","",28,null],[11,"deserialize_i64","","",28,null],[11,"deserialize_f32","","",28,null],[11,"deserialize_f64","","",28,null],[11,"deserialize_char","","",28,null],[11,"deserialize_str","","",28,null],[11,"deserialize_string","","",28,null],[11,"deserialize_unit","","",28,null],[11,"deserialize_option","","",28,null],[11,"deserialize_seq","","",28,null],[11,"deserialize_seq_fixed_size","","",28,null],[11,"deserialize_bytes","","",28,null],[11,"deserialize_map","","",28,null],[11,"deserialize_unit_struct","","",28,null],[11,"deserialize_newtype_struct","","",28,null],[11,"deserialize_tuple_struct","","",28,null],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,null],[11,"deserialize_tuple","","",28,null],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,null],[11,"deserialize_byte_buf","","",28,null],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive\nerror messages belonging to the `Deserializer` against which they are\ncurrently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was\nexpecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that\nis wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains\ntoo many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an\nunrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an\nunrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required\nfield with a particular name but that field was not present in the\ninput.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting\nto receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as\nthe `Display` and `Debug` traits.",30,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you\never find yourself looking for a way to pass data into a `Deserialize` impl,\nthis trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except\nwith some initial piece of data (the seed) passed in.",32,null],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,null],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,null],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,null],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,null],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,null],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,null],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,null],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,null],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,null],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,null],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,null],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,null],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,null],[11,"visit_str","","Deserialize a `&amp;str` into a `Value`.",34,null],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,null],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,null],[11,"visit_none","","Deserialize an absent optional `Value`.",34,null],[11,"visit_some","","Deserialize a present optional `Value`.",34,null],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,null],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,null],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,null],[11,"visit_enum","","Deserialize `Value` as an enum.",34,null],[11,"visit_bytes","","Deserialize a `&amp;[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec&lt;u8&gt;` into a `Value`.",34,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed\nto the `Deserialize` in order to identify which variant of an enum to\ndeserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum\nvariant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,null],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and\npassed to the `Deserialize` to deserialize the content of a particular enum\nvariant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,null],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,null],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,null],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,null],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",30,null],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support\nserializing one of the compound types.",null,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_key","","",39,null],[11,"serialize_value","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors\nbelonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error\nwhile serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_element`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,null],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and\n`Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,null],[10,"end","","Finish serializing a sequence.",43,null],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,null],[10,"end","","Finish serializing a tuple.",44,null],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,null],[10,"end","","Finish serializing a tuple struct.",45,null],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,null],[10,"end","","Finish serializing a tuple variant.",46,null],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,null],[10,"serialize_value","","Serialize a map value.",47,null],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,null],[10,"end","","Finish serializing a map.",47,null],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,null],[10,"end","","Finish serializing a struct.",48,null],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,null],[10,"end","","Finish serializing a struct variant.",49,null],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_element`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[11,"collect_seq","","Collect an iterator as a sequence.",42,null],[11,"collect_map","","Collect an iterator as a map.",42,null],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format\nfor Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
initSearch(searchIndex);
